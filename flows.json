[
    {
        "id": "84134100670d554b",
        "type": "tab",
        "label": "Tutorials",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f1c27791682cd627",
        "type": "tab",
        "label": "Slash Command Examples",
        "disabled": false,
        "info": "Example slash commands that can be tweaked. Copy code to a flow under your own name for any deep dev work.\n\nCommands have undergone several iterations and ports so the code is likely sloppy af.",
        "env": []
    },
    {
        "id": "018d3d9f8b1baf1f",
        "type": "tab",
        "label": "Mimir Core Connections",
        "disabled": false,
        "info": "This flow is where I'll set up the dev connectors to Mimir Core. **Don't touch this flow please.**",
        "env": []
    },
    {
        "id": "5aabc3cdee9a747f",
        "type": "junction",
        "z": "84134100670d554b",
        "x": 660,
        "y": 620,
        "wires": [
            [
                "3dad1347f0e61188"
            ]
        ]
    },
    {
        "id": "7969f211d9887452",
        "type": "websocket-client",
        "path": "ws://mimir.ascendedtrading.com/ws/core",
        "tls": "",
        "wholemsg": "true",
        "hb": "30",
        "subprotocol": ""
    },
    {
        "id": "fe96062b293f302d",
        "type": "websocket-client",
        "path": "ws://mimir.ascendedtrading.com/ws/dev",
        "tls": "",
        "wholemsg": "true",
        "hb": "30",
        "subprotocol": ""
    },
    {
        "id": "b63fcc8ba57942c1",
        "type": "inject",
        "z": "84134100670d554b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "fde5f82253615978"
            ]
        ]
    },
    {
        "id": "fde5f82253615978",
        "type": "function",
        "z": "84134100670d554b",
        "name": "Hello World",
        "func": "node.warn(\"Hello World\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            [
                "7131e2df87afec92"
            ]
        ]
    },
    {
        "id": "7131e2df87afec92",
        "type": "debug",
        "z": "84134100670d554b",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 200,
        "wires": []
    },
    {
        "id": "cfc311f303c73af4",
        "type": "comment",
        "z": "84134100670d554b",
        "name": "Example Flow",
        "info": "This flow injects a timestamp into the function node which then uses `node.warn(\"Hello World\")` to place a warning in the debug console (accessible in the top right of your screen with the `bug` icon). The message is then passed through that node and into the debug node which then logs the timestamp as it's configured to show msg.payload. It can also be configured to show the entire contents of the `msg` property.",
        "x": 150,
        "y": 160,
        "wires": []
    },
    {
        "id": "0812b5a5d01ccaa5",
        "type": "comment",
        "z": "84134100670d554b",
        "name": "Example Flow 2",
        "info": "This flow demonstrates sending a message to discord.\n\n 1. Click the button on the inject node to inject a message (timestamp) into the next node and start the flow\n 2. The change node sets `msg.payload` to \"Hello World\", the discord function converts `msg.payload` into the \"content\" field of a discord message.\n 3. The link out node connects to the `Discord Out` connector which forwards the message to Mimir Core and to the #playground channel in Discord.",
        "x": 160,
        "y": 300,
        "wires": []
    },
    {
        "id": "28251d9586747408",
        "type": "inject",
        "z": "84134100670d554b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "205cbd7d50058ef6"
            ]
        ]
    },
    {
        "id": "205cbd7d50058ef6",
        "type": "change",
        "z": "84134100670d554b",
        "name": "set msg.payload to \"Hello World\"",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Hello World",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 340,
        "wires": [
            [
                "07a7ad65a01cce3e"
            ]
        ]
    },
    {
        "id": "07a7ad65a01cce3e",
        "type": "link out",
        "z": "84134100670d554b",
        "name": "Discord Out Shortcut",
        "mode": "link",
        "links": [
            "18e87e645a79b0eb",
            "629b2f47e063001c"
        ],
        "x": 535,
        "y": 340,
        "wires": []
    },
    {
        "id": "4f3526a78ff93de4",
        "type": "comment",
        "z": "84134100670d554b",
        "name": "Example Flow 3",
        "info": "This example is broken up into four parts.\n\n**Part One (Top Left)**\nThe inject node injects messages into two nodes at the same time. Each node message is referred to as \"context\" and the change nodes put values into a \"context store\". You can view context stores on by clicking the \"down arrow\" next to the bug icon in the top right of the screen. When the change nodes are triggered they add values to two different stores:\n\n1. Flow: context in this store is only availiable on the same \"Flow\" which is what is the tabs are called. This \"Flow\" is called \"Tutorials\" so the data stored in that Flow context store is only availiable to the nodes within the \"Tutorials\" flow.\n2. Global: context in this store is availiable across the entire application.\n\n**Part Two (Top Right)**\nThe inject nodes in this section delete the variables we set in the context stores.\n\n**Part Three (Bottom Left)**\nHere we demonstrate setting context within a function node. You can also retrieve context within a function node by using `get` instead of `set`.\n\n**Part Four (Bottom Right)**\nThese inject nodes push the current value of each name variable into the debug panel.\n\n---\n\nContextStorage is currently the method Mimir uses to store *all* it's data. I'll likely be migrating to a database at some point in the future, however, thus far it has 100's of thousands of records and sees zero slowdown.\n\nContext also has two storage formats:\n\n1. File: This is the default storage method for Mimir's configuration. Context in both the Flow and Global stores is saved to disk and survives reboots, etc.\n2. Memory Only: This storage method which can be called by adding \"memoryOnly\" as a third option in `get` and `set` calls does exactly as you'd figure. The stores survive as long as Node-RED is running but are cleared upon reboot.\n\nOne more note on context is that when it's brought out of the store, it's brought out as a reference by default. Meaning if you were to do something like:\n\n`this = global.get('this')`\n`this = false`\n\n\"this\" is then updated in the context store automatically. In order to avoid this behavior you can select \"Deep copy value\" in a change node if you're accessing context from there or you can use the following helper function to make a copy of the context without the reference:\n\n`this = RED.util.cloneMessage( global.get(\"this\") )`\n`this = false`\n\nIn that scenario, \"this\" isn't updated.\n\nOne final note is that context stores can be thought of as JSON fields in a database. They can store arrays and the like.",
        "x": 160,
        "y": 440,
        "wires": []
    },
    {
        "id": "e193aedb5d020d3d",
        "type": "inject",
        "z": "84134100670d554b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 480,
        "wires": [
            [
                "2229216446e016b1",
                "80835ac417fed99f"
            ]
        ]
    },
    {
        "id": "2229216446e016b1",
        "type": "change",
        "z": "84134100670d554b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "demo",
                "pt": "flow",
                "to": "Hello Flow",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "80835ac417fed99f",
        "type": "change",
        "z": "84134100670d554b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "demo",
                "pt": "global",
                "to": "Hello Global",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "4c4136a9951681d0",
        "type": "inject",
        "z": "84134100670d554b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "demo",
        "payloadType": "flow",
        "x": 540,
        "y": 580,
        "wires": [
            [
                "5aabc3cdee9a747f"
            ]
        ]
    },
    {
        "id": "3dad1347f0e61188",
        "type": "debug",
        "z": "84134100670d554b",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 620,
        "wires": []
    },
    {
        "id": "8bbd07b70ff49f08",
        "type": "inject",
        "z": "84134100670d554b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "demo",
        "payloadType": "global",
        "x": 550,
        "y": 620,
        "wires": [
            [
                "5aabc3cdee9a747f"
            ]
        ]
    },
    {
        "id": "e86aeed7a3a3e201",
        "type": "inject",
        "z": "84134100670d554b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 480,
        "wires": [
            [
                "3d48c94cd42d041f",
                "b19ad028538d3a8a"
            ]
        ]
    },
    {
        "id": "3d48c94cd42d041f",
        "type": "change",
        "z": "84134100670d554b",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "demo",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b19ad028538d3a8a",
        "type": "change",
        "z": "84134100670d554b",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "demo",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "66c536f33380abde",
        "type": "inject",
        "z": "84134100670d554b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "89ed6dd1541536e3",
                "e6cba750f728b97a"
            ]
        ]
    },
    {
        "id": "89ed6dd1541536e3",
        "type": "function",
        "z": "84134100670d554b",
        "name": "set flow.demo",
        "func": "flow.set('demo', 'Hello Function Flow')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "e6cba750f728b97a",
        "type": "function",
        "z": "84134100670d554b",
        "name": "set global.demo",
        "func": "global.set('demo', 'Hello Function Global')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "129ad823bf03e17b",
        "type": "comment",
        "z": "84134100670d554b",
        "name": "Example Flow 4",
        "info": "This stupidly simple example is actually pretty cool.\n\n1. The inject node, we've seen this before.\n2. This is a `link call` node which calls a `link in` node, in this case being the `MCAL Data` node in the \"Mimir Connections\" Flow. The message is sent to Mimir Core via the WebSocket connection and runs through the part of that system that attaches the market calendar data to the payload of the message. Now the cool part is that it runs through Mimir Core as normal, but when the data is returned here, the message comes back in the state it left meaning the `WebSocket In` connection returns the message to the \"calling node\", which again is just this one node here. So essentially this `link call` has an entire process behind it but in pratice simply appends data to the `msg.payload` property.\n3. The data returned can be viewed in the debug pane that we've talked about before.\n\n---\n\nFor a peek behind the curtain, what is happening is that the `link call` info is stored on the msg as `msg._linkSource` which is what Node-RED uses to return the message once it hits a `link out` node configured to \"return to calling node\".\n\nWhen messages hit Mimir Core the `msg._linkSource` property is stripped but saved in a global context object as `object[__msgid__] = msg._linkSource`, in Node-RED the message ID's are preserved until termination and can be accessed at `__msgid__` so once the message makes its way through Mimir Core, I am simply referencing that previously stored value and re-attaching it to the message before it's returned through the WebSocket. Mimir Core uses a lot of link calls so while the message is on that side it's able to pass through them unimpeded.\n\nThis is a pretty good example of when to use memoryOnly as the context store. ",
        "x": 160,
        "y": 720,
        "wires": []
    },
    {
        "id": "37c5acc9d3a844e4",
        "type": "inject",
        "z": "84134100670d554b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 780,
        "wires": [
            [
                "da31bb8096580457"
            ]
        ]
    },
    {
        "id": "da31bb8096580457",
        "type": "link call",
        "z": "84134100670d554b",
        "name": "",
        "links": [
            "34ff5c41b8079126"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 780,
        "wires": [
            [
                "49038ea58227fb2a"
            ]
        ]
    },
    {
        "id": "49038ea58227fb2a",
        "type": "debug",
        "z": "84134100670d554b",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 780,
        "wires": []
    },
    {
        "id": "27906d69ba913f10",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Construct Table For Discord",
        "func": "var rows = []\n\nif(msg.subcommand == \"default\") {\n\n    count = 0\n    \n    while (count < 2) {\n        rows.push([msg.data[count].meetingDate.replace(\" 02:00PM ET\", \"\"), \"\", \"\", \"\"])\n    rows.push([\"Target Rate\", \"Today\", \"-1\", \"-7\"])\n    \n    msg.data[count].rows.forEach(row =>{\n        rows.push([row.targetRate, row.currentProb + \"%\", row.previousDayProb + \"%\", row.previousWeekProb + \"%\"])\n    })\n    \n    rows.push([\"\", \"\", \"\", \"\"])\n    count++\n    }\n} else {\n    matches = 0\n    \n    msg.data.forEach(data => {\n        \n        query = data.meetingDate.split(\" \")\n        query = `${query[0].toUpperCase()} ${query[2]}`\n        \n        if(msg.subcommand.toUpperCase() == query) {\n              rows.push([data.meetingDate.replace(\" 02:00PM ET\", \"\"), \"\", \"\", \"\"])\n    rows.push([\"Target Rate\", \"Today\", \"-1\", \"-7\"])\n    \n    data.rows.forEach(row =>{\n        rows.push([row.targetRate, row.currentProb + \"%\", row.previousDayProb + \"%\", row.previousWeekProb + \"%\"])\n    })\n        }\n        \n    matches++\n        \n        \n    })\n    \n    if(matches == 0) {\n        rows.push([\"No Results Found\", \"\", \"\", \"\"])\n    }\n    \n    \n}\n\nrows.pop()\n\nvar table = \n    new asciiTable.AsciiTable3().setAlign(3, asciiTable.AlignmentEnum.CENTER)\n    .addRowMatrix(rows);\n    \ntable.setStyle('compact');\n\nvar description = table.toString()\n\nmsg.payload = \"```\" + description + \"```\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "asciiTable",
                "module": "ascii-table3"
            }
        ],
        "x": 1020,
        "y": 260,
        "wires": [
            [
                "3df6b4ba4e138e27"
            ]
        ]
    },
    {
        "id": "6d835c98a7d933c5",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Parse Command",
        "func": "if(msg.date) {\n    msg.subcommand = msg.date\n} else {\n    msg.subcommand = \"default\"\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 260,
        "wires": [
            [
                "42cba602d3bac2f0"
            ]
        ]
    },
    {
        "id": "42cba602d3bac2f0",
        "type": "http request",
        "z": "f1c27791682cd627",
        "name": "Investing.com",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.investing.com/central-banks/fed-rate-monitor",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "USER-AGENT",
                "valueType": "other",
                "valueValue": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"
            }
        ],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "7b256abe5472915f"
            ]
        ]
    },
    {
        "id": "7b256abe5472915f",
        "type": "html",
        "z": "f1c27791682cd627",
        "name": "Grab Cards",
        "property": "payload",
        "outproperty": "payload",
        "tag": "div.cardWrapper",
        "ret": "html",
        "as": "single",
        "x": 650,
        "y": 260,
        "wires": [
            [
                "cbb32f226e06b0b3"
            ]
        ]
    },
    {
        "id": "cbb32f226e06b0b3",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Parse Cards",
        "func": "jssoup = jsSoup.default\n\ndata = []\n\nmsg.payload.forEach(card =>{ \n    \n    var soup = new jssoup(card);\n    \n    meeting = soup.find('i')\n    \n    entry = {}\n    entry.meetingDate = meeting.text.trim()\n    entry.rows = []\n    \n    rows = soup.findAll('tr')\n\n    rows.forEach(row =>{\n        \n      row = row.text.split(\" \")\n      \n      if(row[0] !== \"Target\") {\n      \n          targetRate = `${row[0]} - ${row[2]}`\n          \n          row = row[3].split(\"%\")\n          \n          entry.rows.push({\n              \"targetRate\": targetRate,\n              \"currentProb\": row[0],\n              \"previousDayProb\": row[1],\n              \"previousWeekProb\": row[2]\n          })\n\n      }\n        \n    })\n    \n    data.push(entry)\n    \n})\n\nmsg.data = data\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsSoup",
                "module": "jssoup"
            }
        ],
        "x": 810,
        "y": 260,
        "wires": [
            [
                "27906d69ba913f10"
            ]
        ]
    },
    {
        "id": "f5bc5b8806607835",
        "type": "comment",
        "z": "f1c27791682cd627",
        "name": "Fed Rate",
        "info": "",
        "x": 260,
        "y": 220,
        "wires": []
    },
    {
        "id": "fba2be9c0fbd2527",
        "type": "inject",
        "z": "f1c27791682cd627",
        "name": "Date",
        "props": [
            {
                "p": "date",
                "v": "Dec 2023",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "6d835c98a7d933c5"
            ]
        ]
    },
    {
        "id": "08470656f5161693",
        "type": "inject",
        "z": "f1c27791682cd627",
        "name": "Default",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "6d835c98a7d933c5"
            ]
        ]
    },
    {
        "id": "3df6b4ba4e138e27",
        "type": "link out",
        "z": "f1c27791682cd627",
        "name": "Discord Out Shortcut",
        "mode": "link",
        "links": [
            "18e87e645a79b0eb",
            "629b2f47e063001c"
        ],
        "x": 1175,
        "y": 260,
        "wires": []
    },
    {
        "id": "e74d700b075e28df",
        "type": "template",
        "z": "f1c27791682cd627",
        "name": "Chart HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<style>\n  body {\n  background-color: #2f3136 !important,\n  }\n  </style>\n<body>\n<div style=\"background-color: #2f3136\" height=\"{{height}}\" width=\"300px\">\n  <canvas id=\"myChart\"></canvas>\n</div>\n</body>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2\"></script>\n\n<script>\n  const ctx = document.getElementById('myChart');\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: [\n        {{#poll.options}}\n        '{{label}}',\n        {{/poll.options}}\n      ],\n      datasets: [{\n         barPercentage: .8,\n    categoryPercentage: .8,\n        //label: '# of Votes',\n        data: [\n          {{#poll.options}}\n          {{count}},\n          {{/poll.options}}\n        ],\n         backgroundColor: [\n      {{#colors}}\n        '{{.}}',\n      {{/colors}}\n    ],\n        borderWidth: 1\n      }]\n    },\n    plugins: [ChartDataLabels],\n    options: {\n         responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    animations: { colors: false, x: false },\n    transitions: { active: {animation: {duration: 0}}},\n    plugins: {\n\n      legend: {\n      display: false\n    },\n      // Change options for ALL labels of THIS CHART\n      datalabels: {\n        color: '#fff',\n        anchor: \"end\",\n        align: \"end\",\n        offset: 15\n      }\n    },\n      indexAxis: 'y',\n      scales: {\n      y: {\n        grid: {\n      display: false\n    },\n         color: \"#fff\",\n         ticks: {\n            color: \"#fff\"\n         }\n      },\n        x: {\n          grid: {\n      display: false\n    },\n        display: false,\n        grace: 1,\n          beginAtZero: true,\n          ticks: {\n            precision: 0,\n            color: \"#fff\",\n          },\n          color: \"#fff\"\n        }\n      }\n    }\n  });\n</script>",
        "output": "str",
        "x": 570,
        "y": 720,
        "wires": [
            [
                "fd79bf6f0c8841f8"
            ]
        ]
    },
    {
        "id": "5a521abdfb080630",
        "type": "http in",
        "z": "f1c27791682cd627",
        "name": "Poll Endpoint",
        "url": "/pollChart/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 720,
        "wires": [
            [
                "f4e8217ddb6b0744"
            ]
        ]
    },
    {
        "id": "f68e6bae010a94ac",
        "type": "http response",
        "z": "f1c27791682cd627",
        "name": "Render",
        "statusCode": "200",
        "headers": {},
        "x": 900,
        "y": 720,
        "wires": []
    },
    {
        "id": "f4e8217ddb6b0744",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Get Poll",
        "func": "polls = flow.get('polls')\n\nCOLORS = {\n    multiple_choice: [\n        '#F1A600',\n        '#F3BC00',\n        '#F5D300',\n        '#F7E900',\n        '#F9FF00'\n    ],\n    yes_or_no: [\n        '#3aa35b',\n        '#fe4648',\n    ],\n    profitability: [\n        '#3aa35b',\n        '#fe4648',\n        '#6f7682'\n    ]\n}\n\nid = parseInt(msg.req.params.id)\n\npolls.forEach(poll =>{\n    if(parseInt(poll.id) === id) {\n        if(poll.type) {\n            msg.colors = COLORS[poll.type]\n        } else {\n            msg.colors = poll.options.length === 2 ? COLORS[\"yes_or_no\"]\n                : poll.options.length === 3 ? COLORS[\"profitability\"]\n                : COLORS[\"multiple_choice\"]\n        }\n        msg.poll = poll\n    }\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 720,
        "wires": [
            [
                "e74d700b075e28df"
            ]
        ]
    },
    {
        "id": "fd79bf6f0c8841f8",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Apostrophe Fix",
        "func": "msg.payload = msg.payload.replace(\"&#39;\", \"\\\\'\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 720,
        "wires": [
            [
                "f68e6bae010a94ac"
            ]
        ]
    },
    {
        "id": "f11f52296125c659",
        "type": "comment",
        "z": "f1c27791682cd627",
        "name": "Polls Command Handler",
        "info": "",
        "x": 310,
        "y": 400,
        "wires": []
    },
    {
        "id": "d64b58feca19e354",
        "type": "comment",
        "z": "f1c27791682cd627",
        "name": "Polls Chart Rendering Endpoint (https://dev.ascendedtrading.com/pollChart/:id)",
        "info": "",
        "x": 470,
        "y": 680,
        "wires": []
    },
    {
        "id": "b7d7b6a99797f04e",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Poll Builder",
        "func": "polls = flow.get('polls')\n\nif(!polls) {\n    flow.set('polls', [])\n}\n\nCOLORS = {\n    green: 3,\n    red: 4,\n    blue: 1,\n    grey: 2\n}\n\ntimestamp = moment(new Date()).utc().valueOf()\n\npoll = {\n    id: timestamp,\n    type: msg.subcommand,\n    automated: true,\n    label: msg.payload,\n    userIds: [],\n    options: []\n}\n\nmsg.components = [{\n    type: 1,\n    components: []\n}]\n\nmsg.options.forEach(option =>{\n\n    custom_id = \"dev_\" + timestamp + \"_\" + option.label.replace(/[^a-z0-9]/gi, '').slice(0, 10)\n\n    msg.components[0].components.push({\n        type: 2,\n        label: option.label,\n        style: option.color ? COLORS[option.color] : COLORS[\"grey\"],\n        custom_id: custom_id\n    })\n\n    poll.options.push({\n        type: msg.subcommand,\n        count: 0,\n        label: option.label,\n        custom_id: custom_id\n    })\n})\n\npolls.push(poll)\n\nmsg.id = timestamp\nmsg.label = msg.payload\nmsg.selector = \"#myChart\"\nmsg.filename = \"poll\"\nmsg.url = `http://dev.ascendedtrading.com/pollChart/${timestamp}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1150,
        "y": 480,
        "wires": [
            [
                "e927da87be2dd402"
            ]
        ]
    },
    {
        "id": "70c1f11841f41a4c",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Create Discord Embed",
        "func": " msg.embeds = {\n        \"description\": \"**Poll:** \" + msg.label,\n        \"color\": 0,\n        \"author\": {\n        },\n        \"fields\": [\n        ]\n}\n\n msg.embeds.image = {\n\n        \"url\": \"attachment://poll.png\"\n\n    }\n\n\nmsg.payload = {}\nmsg.interactionOptions = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 540,
        "wires": [
            [
                "c7d5bae103d6acde"
            ]
        ]
    },
    {
        "id": "e927da87be2dd402",
        "type": "link call",
        "z": "f1c27791682cd627",
        "name": "",
        "links": [
            "9d7c3728357819a5"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1340,
        "y": 540,
        "wires": [
            [
                "70c1f11841f41a4c"
            ]
        ]
    },
    {
        "id": "c7d5bae103d6acde",
        "type": "link out",
        "z": "f1c27791682cd627",
        "name": "Send Poll to Discord",
        "mode": "link",
        "links": [
            "18e87e645a79b0eb"
        ],
        "x": 1675,
        "y": 540,
        "wires": []
    },
    {
        "id": "f96983d77c0d54cd",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Poll Message Update Builder",
        "func": "polls = flow.get('polls')\n\npayload = false\n\npolls.forEach(poll => {\n    if(String(poll.id) === msg.interaction.id) {\n        payload = poll.label\n    }\n})\n\nnewMessage = {}\n\nnewMessage.selector = \"#myChart\"\nnewMessage.filename = \"poll\"\nnewMessage.id = msg.interaction.id\nnewMessage.label = payload\nnewMessage.action = \"edit\";\nnewMessage.message = msg.interaction.message.id;\nnewMessage.channel = msg.interaction.message.channelId;\n\nreturn newMessage;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 600,
        "wires": [
            [
                "e927da87be2dd402"
            ]
        ]
    },
    {
        "id": "2e5385956f09fc65",
        "type": "trigger",
        "z": "f1c27791682cd627",
        "name": "Buffer",
        "op1": "1",
        "op2": "1",
        "op1type": "str",
        "op2type": "str",
        "duration": "3",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 930,
        "y": 600,
        "wires": [
            [
                "f96983d77c0d54cd"
            ]
        ]
    },
    {
        "id": "898ae628b4296992",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Poll Vote Handler",
        "func": "polls = flow.get('polls')\n\ncustom_id = msg.payload.customId\nuserid = msg.payload.user.id\nid = custom_id.split('_')[0]\n\nupdate = false\n\npolls.forEach(poll =>{\n  if(String(poll.id) === id) {\n    if(!poll.userIds.includes(userid)) {\n      poll.userIds.push(userid)\n      update = true\n\n      poll.options.forEach(option =>{\n        if(option.custom_id == custom_id) {\n          option.count++\n        }\n      })\n    }\n  }\n})\n\nmsg.interaction = msg.payload\nmsg.interaction.id = id\n\nif(update) {\n  return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 600,
        "wires": [
            [
                "2e5385956f09fc65"
            ]
        ]
    },
    {
        "id": "67f8681ae8997d4c",
        "type": "switch",
        "z": "f1c27791682cd627",
        "name": "",
        "property": "payload.commandName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "poll",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 480,
        "wires": [
            [
                "63c48994a07d1c16"
            ]
        ]
    },
    {
        "id": "63c48994a07d1c16",
        "type": "change",
        "z": "f1c27791682cd627",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "subcommand",
                "pt": "msg",
                "to": "payload.options._subcommand",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 480,
        "wires": [
            [
                "23aee976ac3901fd"
            ]
        ]
    },
    {
        "id": "23aee976ac3901fd",
        "type": "switch",
        "z": "f1c27791682cd627",
        "name": "",
        "property": "subcommand",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "yes_or_no",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "profitability",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "multiple_choice",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 830,
        "y": 480,
        "wires": [
            [
                "77cc0db87e2b8b92"
            ],
            [
                "7a9260b9f1d32379"
            ],
            [
                "affdb321e91890d7"
            ]
        ]
    },
    {
        "id": "77cc0db87e2b8b92",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "yes_or_no",
        "func": "// Only accessible via slash command\n// msg.payload = msg.interactionObject.options.getString('question')\n\nmsg.payload = \"Example\"\n\nmsg.options = [\n    {\n        label: \"Yes\",\n        color: \"green\"\n    },\n    {\n        label: \"No\",\n        color: \"red\"\n    },\n]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 440,
        "wires": [
            [
                "b7d7b6a99797f04e"
            ]
        ]
    },
    {
        "id": "7a9260b9f1d32379",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "profitability",
        "func": "// Only accessible via Slash Commands\n// msg.payload = \"**Anonymous Profitability Check**\\n\" + msg.interactionObject.options.getString('play')\n\nmsg.payload = \"**Anonymous Profitability Check**\\nExample\"\n\nmsg.options = [\n    {\n        label: \"Green\",\n        color: \"green\"\n    },\n    {\n        label: \"Red\",\n        color: \"red\"\n    },\n    {\n        label: \"Didn't Trade\",\n        color: \"grey\"\n    }\n]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 480,
        "wires": [
            [
                "b7d7b6a99797f04e"
            ]
        ]
    },
    {
        "id": "affdb321e91890d7",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "multiple_choice",
        "func": "msg.options = []\n\nmsg.payload.options._hoistedOptions.forEach(option => {\n    if(option.name.includes(\"option\")) {\n        msg.options.push({label: option.value})\n    }\n})\n\n// Only accessible via Slash Commands\n// msg.payload = msg.interactionObject.options.getString('question')\n\nmsg.payload = \"Example\"\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 520,
        "wires": [
            [
                "b7d7b6a99797f04e"
            ]
        ]
    },
    {
        "id": "01d09995f43d6492",
        "type": "link in",
        "z": "f1c27791682cd627",
        "name": "link in 1",
        "links": [
            "19072270ad5a3489"
        ],
        "x": 515,
        "y": 600,
        "wires": [
            [
                "3359a2710a791fb3"
            ]
        ]
    },
    {
        "id": "3359a2710a791fb3",
        "type": "switch",
        "z": "f1c27791682cd627",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "poll/action",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 600,
        "y": 600,
        "wires": [
            [
                "898ae628b4296992"
            ]
        ]
    },
    {
        "id": "09df724c238db629",
        "type": "comment",
        "z": "f1c27791682cd627",
        "name": "Vote Handler",
        "info": "",
        "x": 570,
        "y": 560,
        "wires": []
    },
    {
        "id": "3f16b7e976903c94",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Test Data",
        "func": "msg = {\n   \"type\":\"APPLICATION_COMMAND\",\n   \"id\":\"1046181133542498384\",\n   \"user\":{\n      \"id\":\"768562231964860426\",\n      \"bot\":false,\n      \"system\":false,\n      \"flags\":0,\n      \"username\":\"Conqueror\",\n      \"discriminator\":\"6969\",\n      \"avatar\":\"dacf6c92a453cbec508c7c7bc5150f58\",\n      \"banner\":\"0ecef034f56285a73efd5720d167aac9\",\n      \"accentColor\":null,\n      \"createdTimestamp\":1603309915296,\n      \"defaultAvatarURL\":\"https://cdn.discordapp.com/embed/avatars/4.png\",\n      \"hexAccentColor\":null,\n      \"tag\":\"Conqueror#6969\",\n      \"avatarURL\":\"https://cdn.discordapp.com/avatars/768562231964860426/dacf6c92a453cbec508c7c7bc5150f58.webp\",\n      \"displayAvatarURL\":\"https://cdn.discordapp.com/avatars/768562231964860426/dacf6c92a453cbec508c7c7bc5150f58.webp\",\n      \"bannerURL\":\"https://cdn.discordapp.com/banners/768562231964860426/0ecef034f56285a73efd5720d167aac9.webp\"\n   },\n   \"version\":1,\n   \"appPermissions\":\"1072772402753\",\n   \"memberPermissions\":\"4398046511103\",\n   \"locale\":\"en-US\",\n   \"guildLocale\":\"en-US\",\n   \"commandId\":\"1045957132975079489\",\n   \"commandName\":\"poll\",\n   \"deferred\":true,\n   \"replied\":false,\n   \"ephemeral\":false,\n   \"options\":{\n      \"_group\":null,\n      \"_subcommand\":\"profitability\",\n      \"_hoistedOptions\":[\n         {\n            \"name\":\"play\",\n            \"type\":\"STRING\",\n            \"value\":\"Example\"\n         }\n      ]\n   },\n   \"replyMessage\":{\n      \"channelId\":\"1045767424575819886\",\n      \"guildId\":\"994590548520345710\",\n      \"id\":\"1046181134272311357\",\n      \"createdTimestamp\":1669499419516,\n      \"type\":\"APPLICATION_COMMAND\",\n      \"system\":false,\n      \"content\":\"\",\n      \"authorId\":\"903343207323148349\",\n      \"pinned\":false,\n      \"tts\":false,\n      \"embeds\":[\n         \n      ],\n      \"components\":[\n         \n      ],\n      \"attachments\":[\n         \n      ],\n      \"stickers\":[\n         \n      ],\n      \"editedTimestamp\":null,\n      \"activity\":null,\n      \"flags\":128,\n      \"reference\":null,\n      \"cleanContent\":\"\"\n   }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 480,
        "wires": [
            [
                "67f8681ae8997d4c"
            ]
        ]
    },
    {
        "id": "46899ef52d0a2edf",
        "type": "inject",
        "z": "f1c27791682cd627",
        "name": "Profitability Command",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "3f16b7e976903c94"
            ]
        ]
    },
    {
        "id": "40e7a2896685adbc",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Test Data",
        "func": "msg = {\n   \"type\":\"APPLICATION_COMMAND\",\n   \"id\":\"1046181133542498384\",\n   \"user\":{\n      \"id\":\"768562231964860426\",\n      \"bot\":false,\n      \"system\":false,\n      \"flags\":0,\n      \"username\":\"Conqueror\",\n      \"discriminator\":\"6969\",\n      \"avatar\":\"dacf6c92a453cbec508c7c7bc5150f58\",\n      \"banner\":\"0ecef034f56285a73efd5720d167aac9\",\n      \"accentColor\":null,\n      \"createdTimestamp\":1603309915296,\n      \"defaultAvatarURL\":\"https://cdn.discordapp.com/embed/avatars/4.png\",\n      \"hexAccentColor\":null,\n      \"tag\":\"Conqueror#6969\",\n      \"avatarURL\":\"https://cdn.discordapp.com/avatars/768562231964860426/dacf6c92a453cbec508c7c7bc5150f58.webp\",\n      \"displayAvatarURL\":\"https://cdn.discordapp.com/avatars/768562231964860426/dacf6c92a453cbec508c7c7bc5150f58.webp\",\n      \"bannerURL\":\"https://cdn.discordapp.com/banners/768562231964860426/0ecef034f56285a73efd5720d167aac9.webp\"\n   },\n   \"version\":1,\n   \"appPermissions\":\"1072772402753\",\n   \"memberPermissions\":\"4398046511103\",\n   \"locale\":\"en-US\",\n   \"guildLocale\":\"en-US\",\n   \"commandId\":\"1045957132975079489\",\n   \"commandName\":\"poll\",\n   \"deferred\":true,\n   \"replied\":false,\n   \"ephemeral\":false,\n   \"options\":{\n      \"_group\": null,\n      \"_subcommand\": \"yes_or_no\",\n      \"_hoistedOptions\": [\n         {\n            \"name\": \"question\",\n            \"type\": \"STRING\",\n            \"value\": \"Example\"\n         }\n      ]\n   },\n   \"replyMessage\":{\n      \"channelId\":\"1045767424575819886\",\n      \"guildId\":\"994590548520345710\",\n      \"id\":\"1046181134272311357\",\n      \"createdTimestamp\":1669499419516,\n      \"type\":\"APPLICATION_COMMAND\",\n      \"system\":false,\n      \"content\":\"\",\n      \"authorId\":\"903343207323148349\",\n      \"pinned\":false,\n      \"tts\":false,\n      \"embeds\":[\n         \n      ],\n      \"components\":[\n         \n      ],\n      \"attachments\":[\n         \n      ],\n      \"stickers\":[\n         \n      ],\n      \"editedTimestamp\":null,\n      \"activity\":null,\n      \"flags\":128,\n      \"reference\":null,\n      \"cleanContent\":\"\"\n   }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 440,
        "wires": [
            [
                "67f8681ae8997d4c"
            ]
        ]
    },
    {
        "id": "21c5e451ca661bf1",
        "type": "inject",
        "z": "f1c27791682cd627",
        "name": "Yes_or_no Command",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 440,
        "wires": [
            [
                "40e7a2896685adbc"
            ]
        ]
    },
    {
        "id": "2a39995f04207c2a",
        "type": "function",
        "z": "f1c27791682cd627",
        "name": "Test Data",
        "func": "msg = {\n   \"type\":\"APPLICATION_COMMAND\",\n   \"id\":\"1046181133542498384\",\n   \"user\":{\n      \"id\":\"768562231964860426\",\n      \"bot\":false,\n      \"system\":false,\n      \"flags\":0,\n      \"username\":\"Conqueror\",\n      \"discriminator\":\"6969\",\n      \"avatar\":\"dacf6c92a453cbec508c7c7bc5150f58\",\n      \"banner\":\"0ecef034f56285a73efd5720d167aac9\",\n      \"accentColor\":null,\n      \"createdTimestamp\":1603309915296,\n      \"defaultAvatarURL\":\"https://cdn.discordapp.com/embed/avatars/4.png\",\n      \"hexAccentColor\":null,\n      \"tag\":\"Conqueror#6969\",\n      \"avatarURL\":\"https://cdn.discordapp.com/avatars/768562231964860426/dacf6c92a453cbec508c7c7bc5150f58.webp\",\n      \"displayAvatarURL\":\"https://cdn.discordapp.com/avatars/768562231964860426/dacf6c92a453cbec508c7c7bc5150f58.webp\",\n      \"bannerURL\":\"https://cdn.discordapp.com/banners/768562231964860426/0ecef034f56285a73efd5720d167aac9.webp\"\n   },\n   \"version\":1,\n   \"appPermissions\":\"1072772402753\",\n   \"memberPermissions\":\"4398046511103\",\n   \"locale\":\"en-US\",\n   \"guildLocale\":\"en-US\",\n   \"commandId\":\"1045957132975079489\",\n   \"commandName\":\"poll\",\n   \"deferred\":true,\n   \"replied\":false,\n   \"ephemeral\":false,\n   \"options\":{\n      \"_group\": null,\n      \"_subcommand\": \"multiple_choice\",\n      \"_hoistedOptions\": [\n         {\n            \"name\": \"question\",\n            \"type\": \"STRING\",\n            \"value\": \"Example\"\n         },\n         {\n            \"name\": \"option_one\",\n            \"type\": \"STRING\",\n            \"value\": \"One\"\n         },\n         {\n            \"name\": \"option_two\",\n            \"type\": \"STRING\",\n            \"value\": \"Two\"\n         },\n         {\n            \"name\": \"option_three\",\n            \"type\": \"STRING\",\n            \"value\": \"Three\"\n         },\n         {\n            \"name\": \"option_four\",\n            \"type\": \"STRING\",\n            \"value\": \"Four\"\n         },\n         {\n            \"name\": \"option_five\",\n            \"type\": \"STRING\",\n            \"value\": \"Five\"\n         }\n      ]\n   },\n   \"replyMessage\":{\n      \"channelId\":\"1045767424575819886\",\n      \"guildId\":\"994590548520345710\",\n      \"id\":\"1046181134272311357\",\n      \"createdTimestamp\":1669499419516,\n      \"type\":\"APPLICATION_COMMAND\",\n      \"system\":false,\n      \"content\":\"\",\n      \"authorId\":\"903343207323148349\",\n      \"pinned\":false,\n      \"tts\":false,\n      \"embeds\":[\n         \n      ],\n      \"components\":[\n         \n      ],\n      \"attachments\":[\n         \n      ],\n      \"stickers\":[\n         \n      ],\n      \"editedTimestamp\":null,\n      \"activity\":null,\n      \"flags\":128,\n      \"reference\":null,\n      \"cleanContent\":\"\"\n   }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 520,
        "wires": [
            [
                "67f8681ae8997d4c"
            ]
        ]
    },
    {
        "id": "c76ac509d93cd979",
        "type": "inject",
        "z": "f1c27791682cd627",
        "name": "Multiple_choice Command",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "2a39995f04207c2a"
            ]
        ]
    },
    {
        "id": "ae5cf8f5fe631665",
        "type": "websocket in",
        "z": "018d3d9f8b1baf1f",
        "name": "Mimir Core WebSocket In",
        "server": "",
        "client": "7969f211d9887452",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "4e45b7b7877a11f0"
            ]
        ]
    },
    {
        "id": "19072270ad5a3489",
        "type": "link out",
        "z": "018d3d9f8b1baf1f",
        "name": "Core In",
        "mode": "link",
        "links": [
            "01d09995f43d6492"
        ],
        "x": 365,
        "y": 60,
        "wires": []
    },
    {
        "id": "1b6395fe324fb456",
        "type": "websocket out",
        "z": "018d3d9f8b1baf1f",
        "name": "Mimir Core WebSocket Out",
        "server": "",
        "client": "fe96062b293f302d",
        "x": 240,
        "y": 160,
        "wires": []
    },
    {
        "id": "491c7d96c6728cb5",
        "type": "link in",
        "z": "018d3d9f8b1baf1f",
        "name": "Core Out",
        "links": [
            "edccce7940c99df0",
            "3474d2c2a8be7a5e"
        ],
        "x": 75,
        "y": 160,
        "wires": [
            [
                "1b6395fe324fb456"
            ]
        ]
    },
    {
        "id": "4e45b7b7877a11f0",
        "type": "switch",
        "z": "018d3d9f8b1baf1f",
        "name": "Link Call Check",
        "property": "_linkSource",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 315,
        "y": 80,
        "wires": [
            [
                "19072270ad5a3489"
            ],
            [
                "dea0416b9fe008fb"
            ]
        ],
        "outputLabels": [
            "Firehouse",
            "Return to calling node"
        ],
        "l": false
    },
    {
        "id": "dea0416b9fe008fb",
        "type": "link out",
        "z": "018d3d9f8b1baf1f",
        "name": "Core In Link Call",
        "mode": "return",
        "links": [],
        "x": 365,
        "y": 100,
        "wires": []
    },
    {
        "id": "18e87e645a79b0eb",
        "type": "link in",
        "z": "018d3d9f8b1baf1f",
        "name": "Discord Out",
        "links": [
            "07a7ad65a01cce3e",
            "3df6b4ba4e138e27",
            "c7d5bae103d6acde"
        ],
        "x": 245,
        "y": 340,
        "wires": [
            [
                "4ac02535312e527f"
            ]
        ],
        "info": "# Send message to the #playground channel in Valhalla\n# \n\n### Send a text message\n`msg.payload = \"Hello World\"`\n\n### Send an embed \nHelpful tool: https://glitchii.github.io/embedbuilder/\n`msg.embeds = \n        {\n            \"title\": \"Hello ~~people~~ world :wave:\",\n            \"description\": \"You can use [links](https://discord.com) or emojis :smile: 😎\\n```\\nAnd also code blocks\\n```\",\n            \"color\": 4321431,\n            \"timestamp\": \"2022-11-25T03:52:05.554Z\",\n            \"url\": \"https://discord.com\",\n            \"author\": {\n                \"name\": \"Author name\",\n                \"url\": \"https://discord.com\",\n                \"icon_url\": \"https://cdn.discordapp.com/embed/avatars/0.png\"\n            },\n            \"thumbnail\": {\n                \"url\": \"https://cdn.discordapp.com/embed/avatars/0.png\"\n            },\n            \"image\": {\n                \"url\": \"https://glitchii.github.io/embedbuilder/assets/media/banner.png\"\n            },\n            \"footer\": {\n                \"text\": \"Footer text\",\n                \"icon_url\": \"https://cdn.discordapp.com/embed/avatars/0.png\"\n            },\n            \"fields\": [\n                {\n                    \"name\": \"Field 1, *lorem* **ipsum**, ~~dolor~~\",\n                    \"value\": \"Field value\"\n                },\n                {\n                    \"name\": \"Field 2\",\n                    \"value\": \"You can use custom emojis <:Kekwlaugh:722088222766923847>. <:GangstaBlob:742256196295065661>\",\n                    \"inline\": false\n                },\n                {\n                    \"name\": \"Inline field\",\n                    \"value\": \"Fields can be inline\",\n                    \"inline\": true\n                },\n                {\n                    \"name\": \"Inline field\",\n                    \"value\": \"*Lorem ipsum*\",\n                    \"inline\": true\n                },\n                {\n                    \"name\": \"Inline field\",\n                    \"value\": \"value\",\n                    \"inline\": true\n                },\n                {\n                    \"name\": \"Another field\",\n                    \"value\": \"> Nope, didn't forget about this\",\n                    \"inline\": false\n                }\n            ]\n        }\n    `"
    },
    {
        "id": "4ac02535312e527f",
        "type": "change",
        "z": "018d3d9f8b1baf1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "core",
                "pt": "msg",
                "to": "discord/out",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 340,
        "wires": [
            [
                "edccce7940c99df0"
            ]
        ]
    },
    {
        "id": "edccce7940c99df0",
        "type": "link out",
        "z": "018d3d9f8b1baf1f",
        "name": "Core Out Shortcut",
        "mode": "link",
        "links": [
            "491c7d96c6728cb5"
        ],
        "x": 605,
        "y": 480,
        "wires": []
    },
    {
        "id": "1cd0176c3668aba9",
        "type": "comment",
        "z": "018d3d9f8b1baf1f",
        "name": "Discord Out",
        "info": "# Send message to the #playground channel in Valhalla\n\nUse a `link out` node to connect to `Discord Out`.\n\n### Send a text message\n`msg.payload = \"Hello World\"`\n\n### Send an embed \nHelpful tool: https://glitchii.github.io/embedbuilder/\n`msg.embeds = \n        {\n            \"title\": \"Hello ~~people~~ world :wave:\",\n            \"description\": \"You can use [links](https://discord.com) or emojis :smile: 😎\\n```\\nAnd also code blocks\\n```\",\n            \"color\": 4321431,\n            \"timestamp\": \"2022-11-25T03:52:05.554Z\",\n            \"url\": \"https://discord.com\",\n            \"author\": {\n                \"name\": \"Author name\",\n                \"url\": \"https://discord.com\",\n                \"icon_url\": \"https://cdn.discordapp.com/embed/avatars/0.png\"\n            },\n            \"thumbnail\": {\n                \"url\": \"https://cdn.discordapp.com/embed/avatars/0.png\"\n            },\n            \"image\": {\n                \"url\": \"https://glitchii.github.io/embedbuilder/assets/media/banner.png\"\n            },\n            \"footer\": {\n                \"text\": \"Footer text\",\n                \"icon_url\": \"https://cdn.discordapp.com/embed/avatars/0.png\"\n            },\n            \"fields\": [\n                {\n                    \"name\": \"Field 1, *lorem* **ipsum**, ~~dolor~~\",\n                    \"value\": \"Field value\"\n                },\n                {\n                    \"name\": \"Field 2\",\n                    \"value\": \"You can use custom emojis <:Kekwlaugh:722088222766923847>. <:GangstaBlob:742256196295065661>\",\n                    \"inline\": false\n                },\n                {\n                    \"name\": \"Inline field\",\n                    \"value\": \"Fields can be inline\",\n                    \"inline\": true\n                },\n                {\n                    \"name\": \"Inline field\",\n                    \"value\": \"*Lorem ipsum*\",\n                    \"inline\": true\n                },\n                {\n                    \"name\": \"Inline field\",\n                    \"value\": \"value\",\n                    \"inline\": true\n                },\n                {\n                    \"name\": \"Another field\",\n                    \"value\": \"> Nope, didn't forget about this\",\n                    \"inline\": false\n                }\n            ]\n        }\n    `",
        "x": 350,
        "y": 300,
        "wires": []
    },
    {
        "id": "96c1084e0639a3a5",
        "type": "change",
        "z": "018d3d9f8b1baf1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "core",
                "pt": "msg",
                "to": "mcal",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 440,
        "wires": [
            [
                "edccce7940c99df0"
            ]
        ]
    },
    {
        "id": "15dc9b02fa5f03f4",
        "type": "comment",
        "z": "018d3d9f8b1baf1f",
        "name": "MCAL Data",
        "info": "Get Mcal data returned.\n\nUse a \"call link\" node to have data sent to the msg.payload of your next node.\n\nSee the Example 4 in the tutorials flow.",
        "x": 350,
        "y": 400,
        "wires": []
    },
    {
        "id": "34ff5c41b8079126",
        "type": "link in",
        "z": "018d3d9f8b1baf1f",
        "name": "MCAL Data",
        "links": [],
        "x": 245,
        "y": 440,
        "wires": [
            [
                "96c1084e0639a3a5"
            ]
        ]
    },
    {
        "id": "5f3604aa1013aaee",
        "type": "change",
        "z": "018d3d9f8b1baf1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "core",
                "pt": "msg",
                "to": "positions",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 540,
        "wires": [
            [
                "edccce7940c99df0"
            ]
        ]
    },
    {
        "id": "035972576dbdc267",
        "type": "comment",
        "z": "018d3d9f8b1baf1f",
        "name": "Positions Data",
        "info": "Appends positions data to `msg.payload`",
        "x": 350,
        "y": 500,
        "wires": []
    },
    {
        "id": "05605e40d59c1abc",
        "type": "link in",
        "z": "018d3d9f8b1baf1f",
        "name": "Positions Data",
        "links": [],
        "x": 245,
        "y": 540,
        "wires": [
            [
                "5f3604aa1013aaee"
            ]
        ]
    },
    {
        "id": "3cc523b116753f59",
        "type": "change",
        "z": "018d3d9f8b1baf1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "core",
                "pt": "msg",
                "to": "quote",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 640,
        "wires": [
            [
                "edccce7940c99df0"
            ]
        ]
    },
    {
        "id": "3155f25f57ac9d2c",
        "type": "comment",
        "z": "018d3d9f8b1baf1f",
        "name": "Quote Data",
        "info": "Appends quote data to `msg.payload`. Requires a ticker symbol as `msg.ticker`.",
        "x": 350,
        "y": 600,
        "wires": []
    },
    {
        "id": "498b376f5b88d416",
        "type": "link in",
        "z": "018d3d9f8b1baf1f",
        "name": "Quote Data",
        "links": [],
        "x": 245,
        "y": 640,
        "wires": [
            [
                "3cc523b116753f59"
            ]
        ]
    },
    {
        "id": "9d7c3728357819a5",
        "type": "link in",
        "z": "018d3d9f8b1baf1f",
        "name": "Browser Queue",
        "links": [],
        "x": 505,
        "y": 340,
        "wires": [
            [
                "fc098e4898e10568"
            ]
        ],
        "info": "# Send message to the #playground channel in Valhalla\n# \n\n### Send a text message\n`msg.payload = \"Hello World\"`\n\n### Send an embed \nHelpful tool: https://glitchii.github.io/embedbuilder/\n`msg.embeds = \n        {\n            \"title\": \"Hello ~~people~~ world :wave:\",\n            \"description\": \"You can use [links](https://discord.com) or emojis :smile: 😎\\n```\\nAnd also code blocks\\n```\",\n            \"color\": 4321431,\n            \"timestamp\": \"2022-11-25T03:52:05.554Z\",\n            \"url\": \"https://discord.com\",\n            \"author\": {\n                \"name\": \"Author name\",\n                \"url\": \"https://discord.com\",\n                \"icon_url\": \"https://cdn.discordapp.com/embed/avatars/0.png\"\n            },\n            \"thumbnail\": {\n                \"url\": \"https://cdn.discordapp.com/embed/avatars/0.png\"\n            },\n            \"image\": {\n                \"url\": \"https://glitchii.github.io/embedbuilder/assets/media/banner.png\"\n            },\n            \"footer\": {\n                \"text\": \"Footer text\",\n                \"icon_url\": \"https://cdn.discordapp.com/embed/avatars/0.png\"\n            },\n            \"fields\": [\n                {\n                    \"name\": \"Field 1, *lorem* **ipsum**, ~~dolor~~\",\n                    \"value\": \"Field value\"\n                },\n                {\n                    \"name\": \"Field 2\",\n                    \"value\": \"You can use custom emojis <:Kekwlaugh:722088222766923847>. <:GangstaBlob:742256196295065661>\",\n                    \"inline\": false\n                },\n                {\n                    \"name\": \"Inline field\",\n                    \"value\": \"Fields can be inline\",\n                    \"inline\": true\n                },\n                {\n                    \"name\": \"Inline field\",\n                    \"value\": \"*Lorem ipsum*\",\n                    \"inline\": true\n                },\n                {\n                    \"name\": \"Inline field\",\n                    \"value\": \"value\",\n                    \"inline\": true\n                },\n                {\n                    \"name\": \"Another field\",\n                    \"value\": \"> Nope, didn't forget about this\",\n                    \"inline\": false\n                }\n            ]\n        }\n    `"
    },
    {
        "id": "fc098e4898e10568",
        "type": "change",
        "z": "018d3d9f8b1baf1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "core",
                "pt": "msg",
                "to": "browser/queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 340,
        "wires": [
            [
                "edccce7940c99df0"
            ]
        ]
    },
    {
        "id": "64983a1398fe6466",
        "type": "comment",
        "z": "018d3d9f8b1baf1f",
        "name": "Browser Queue",
        "info": "Queue a screenshot from Mimir's screenshot browser function.",
        "x": 620,
        "y": 300,
        "wires": []
    }
]